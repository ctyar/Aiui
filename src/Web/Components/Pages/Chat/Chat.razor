@page "/"
@using System.ComponentModel
@using System.Text.Json
@using Microsoft.Data.SqlClient
@inject IChatClient ChatClient
@inject NavigationManager Nav
@inject Aiui.SqlListPlugin sqlListPlugin;
@inject Aiui.ChartJsPlugin chartJsPlugin;
@inject IConfiguration configuration;
@implements IDisposable

<PageTitle>AI as User Interface</PageTitle>

@if (!IsDbReady)
{
    <div class="chat-container page-width">
        <div><strong>Starting up the SQL Server</strong></div>
        <div>This demo utilizes the free Azure SQL Database offering, which may take up to a minute to wakeup</div>
        <div>Thank you for your patience</div>
        <LoadingSpinner />
    </div>
}
else
{
    <ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
        <NoMessagesContent>
            <div>To get started, try asking about the active products.</div>
        </NoMessagesContent>
    </ChatMessageList>

    <Graph Data="@GraphData" Code="@GraphCode" />

    <DataTable Rows="Rows" />

    <div class="chat-container">
        <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />
        <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" OnNewChat="@ResetConversationAsync" />
        <div>Version: @Web.Version.Current</div>
    </div>
}

@code {
    private readonly ChatOptions chatOptions = new();
    private readonly List<ChatMessage> messages = [];
    private readonly List<ChatMessage> ContextPrompts = [];
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;
    private List<dynamic>? Rows;
    private string? GraphData;
    private string? GraphCode;
    private bool IsDbReady = false;
    private bool IsInitialSuggestionsLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await WaitForDbAsync();

        await SetRootPromptsAsync();

        chatOptions.Tools = [AIFunctionFactory.Create(ListAsync), AIFunctionFactory.Create(ChartAsync)];
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (ContextPrompts.Count > 0)
        {
            messages.AddRange(ContextPrompts);

            ContextPrompts.Clear();
        }

        if (!IsInitialSuggestionsLoaded && messages.Count > 0)
        {
            chatSuggestions?.Update(messages);
        }
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        // Add the user message to the conversation
        messages.Add(userMessage);
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();

        // Stream and display a new response from the IChatClient
        var responseText = new TextContent("");
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
        currentResponseCancellation = new();

        await foreach (var update in ChatClient.GetStreamingResponseAsync([.. messages], chatOptions, currentResponseCancellation.Token))
        {
            messages.AddMessages(update, filter: c => c is not TextContent);
            responseText.Text += update.Text;
            ChatMessageItem.NotifyChanged(currentResponseMessage);
        }

        // Store the final response in the conversation, and begin getting suggestions
        messages.Add(currentResponseMessage!);
        currentResponseMessage = null;
        chatSuggestions?.Update(messages);
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        
        messages.Clear();
        await SetRootPromptsAsync();

        chatSuggestions?.Clear();
        chatSuggestions?.Update(messages);

        await chatInput!.FocusAsync();
    }

    public void Dispose()
    {
        currentResponseCancellation?.Cancel();
    }

    private async Task WaitForDbAsync()
    {
        using var connection = new SqlConnection(configuration.GetConnectionString("SqlServer"));

        while (true)
        {
            try
            {
                await connection.OpenAsync();
                connection.Close();
                IsDbReady = true;
                return;
            }
            catch (SqlException)
            {
            }
        }
    }

    private async Task SetRootPromptsAsync()
    {
        messages.Add(new(ChatRole.System,
@"You are a software developer.
Do not give comment or explanation.
Do not answer questions about anything else.

Only use the tools available to you."));

        var rootPrompts = new List<ChatMessage>();

        var rootPrompt = await sqlListPlugin.GetRootPromptAsync();
        if (rootPrompt is not null)
        {
            rootPrompts.Add(rootPrompt);
        }

        rootPrompt = await sqlListPlugin.GetRootPromptAsync();
        if (rootPrompt is not null)
        {
            rootPrompts.Add(rootPrompt);
        }

        messages.AddRange(rootPrompts);
    }

    [Description("Displays a list of the data available in the database.")]
    private async Task ListAsync(
        [Description("The Microsoft SQL Server query.")] string sqlQuery)
    {
        await InvokeAsync(StateHasChanged);

        var data = await sqlListPlugin.ExecuteAsync(sqlQuery);

        Rows = (List<dynamic>?)data;

        var contextPrompt = await chartJsPlugin.GetContextPromptAsync(Rows);
        if (contextPrompt is null)
        {
            return;
        }

        ContextPrompts.AddRange(contextPrompt);
    }

    [Description("Receives the JavaScript code needed for Chart.js as string and draws the chart for the listed data.")]
    private async Task ChartAsync(
        [Description("The JavaScript code needed for Chart.js as string to draw a chart in an HTML canvas element with the id 'myChart'.")] string chartJsCode)
    {
        await InvokeAsync(StateHasChanged);

        var jsCode = await chartJsPlugin.ExecuteAsync(chartJsCode);

        GraphData = JsonSerializer.Serialize(Rows);
        GraphCode = (string?)jsCode;
    }
}
